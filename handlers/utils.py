import re
import logging
import asyncio
from datetime import datetime
import pytz
from typing import List, Dict, Any, Optional, Callable, Tuple
from aiogram import Bot
from aiogram.types import Message, ReactionTypeEmoji, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo, InputMediaDocument
from Levenshtein import distance
from config import CONSTANTS, RESPONSE_TEMPLATES, KEYBOARDS, ADMIN_IDS, ALLOWED_USERS
from database import Database
from api import PayphoriaAPI

logger = logging.getLogger(__name__)

MONTHS = {
    "01": "—è–Ω–≤–∞—Ä—è", "02": "—Ñ–µ–≤—Ä–∞–ª—è", "03": "–º–∞—Ä—Ç–∞", "04": "–∞–ø—Ä–µ–ª—è",
    "05": "–º–∞—è", "06": "–∏—é–Ω—è", "07": "–∏—é–ª—è", "08": "–∞–≤–≥—É—Å—Ç–∞",
    "09": "—Å–µ–Ω—Ç—è–±—Ä—è", "10": "–æ–∫—Ç—è–±—Ä—è", "11": "–Ω–æ—è–±—Ä—è", "12": "–¥–µ–∫–∞–±—Ä—è"
}



async def set_reaction_on_chain(bot: Bot, message: Message, reactions: List[str]) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –º–µ—Ä—á–∞–Ω—Ç–∞."""
    db = Database()
    if message.chat.id in [m["chat_id"] for m in db.get_merchants()]:
        try:
            logger.debug('reaction set from list')
            await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id, reaction=[ReactionTypeEmoji(emoji=reactions[0])])
        except:
            logger.debug('reaction set eyes')
            await bot.set_message_reaction(chat_id=message.chat.id, message_id=message.message_id, reaction=[ReactionTypeEmoji(emoji="üëÄ")])

async def find_deal_id_in_chain(message: Message) -> Optional[str]:
    """–ù–∞–π—Ç–∏ deal_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ —Ü–µ–ø–æ—á–∫–µ –æ—Ç–≤–µ—Ç–æ–≤."""
    text = message.text or message.caption or ""
    deal_ids = re.findall(CONSTANTS["DEAL_ID_PATTERN"], text)
    if deal_ids:
        return deal_ids[0]
    if message.reply_to_message:
        return await find_deal_id_in_chain(message.reply_to_message)
    return None

async def get_deal_ids(message: Message, api: PayphoriaAPI) -> Optional[str]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–∞–ª–∏–¥–Ω—ã–π deal_id."""
    text = message.text or message.caption or ""
    deal_ids = re.findall(CONSTANTS["DEAL_ID_PATTERN"], text)

    for deal_id in deal_ids:
        order = await api.get_order(deal_id, message.from_user.id)

        if order:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–µ—Ä–Ω—É–ª –ª–∏ –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            logger.debug(f'deal id –Ω–∞–π–¥–µ–Ω {deal_id}')
            return deal_id
        else:
            logger.debug('–¥–∞–Ω–Ω—ã–µ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã')
    return await find_deal_id_in_chain(message)

async def get_media(message: Message) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    media = []
    if message.photo:
        media.append({"type": "photo", "file_id": message.photo[-1].file_id, "caption": message.caption})
    if message.video:
        media.append({"type": "video", "file_id": message.video.file_id, "caption": message.caption})
    if message.document:
        media.append({"type": "document", "file_id": message.document.file_id, "caption": message.caption})
    return media[:10]

async def create_media_group(media: List[Dict[str, Any]]) -> List[Any]:
    """–°–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É."""
    media_group = []
    for item in media:
        if item["type"] == "photo":
            media_group.append(InputMediaPhoto(media=item["file_id"], caption=item.get("caption")))
        elif item["type"] == "video":
            media_group.append(InputMediaVideo(media=item["file_id"], caption=item.get("caption")))
        elif item["type"] == "document":
            media_group.append(InputMediaDocument(media=item["file_id"], caption=item.get("caption")))
    return media_group

async def send_message_with_media(
    bot: Bot,
    chat_id: str,
    text: str,
    media: List[Dict[str, Any]],
    reply_markup: Optional[InlineKeyboardMarkup] = None
) -> Message:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞."""

    if media:
        media_group = await create_media_group(media)

        messages = await bot.send_media_group(chat_id=chat_id, media=media_group)
        await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
        return messages[0]

    return await bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

def create_keyboard(keyboard_type: str, msg_data: Optional[dict] = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""

    current_keyboard = KEYBOARDS.get(keyboard_type, [])



    buttons = []
    for text, data in current_keyboard:
        # –°–æ–∑–¥–∞–µ–º callback_data —Å ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–µ–π—Å—Ç–≤–∏–µ–º
        if msg_data:
            callback_data = f"{data}:{msg_data['deal_id']}:{msg_data['chat_id']}"
        else:
            callback_data = data

        buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])


    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def find_integrator_chat(deal_id: str, api: PayphoriaAPI, db: Database) -> Optional[Dict[str, Any]]:
    """–ù–∞–π—Ç–∏ —á–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞."""
    deal_data = await api.get_order(deal_id, list(ADMIN_IDS)[0])
    if not deal_data:
        return None
    integrator_name = deal_data["integrator_name"]
    cascades = db.get_cascades()
    for cascade in cascades:
        if distance(integrator_name.lower(), cascade["name"].lower()) <= 2:
            return cascade
    return None



async def log_errors(error: Exception, bot: Bot) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤."""
    logger.error(f"–û—à–∏–±–∫–∞: {error}")
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(error)}")
        except:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}")

def require_auth(func: Callable) -> Callable:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    async def wrapper(message: Message, *args, **kwargs):

        if message.from_user.id not in ALLOWED_USERS:
            await message.reply(CONSTANTS["ACCESS_DENIED"])
            return
        return await func(message, *args, **kwargs)
    return wrapper

def require_admin(func: Callable) -> Callable:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø–∞."""

    async def wrapper(message: Message, *args, **kwargs):

        if message.from_user.id not in ADMIN_IDS:
            await message.reply(CONSTANTS["ACCESS_DENIED"])
            return

        return await func(message, *args, **kwargs)
    return wrapper